rm(list=ls())
library(tidyverse)
library(devtools)
library(gridExtra)
library(data.table)
library(latex2exp)
library(elevatr)
library(raster)
library(maps)
library(sp)
library(PBSmapping)
source("sHMEV_function.R")
load("nc.RData")
setwd("/Users/stolffederica/Documents/GitHub/sHMEV/codes")
source("sHMEV_function.R")
load("nc.RData")
load("data/nc.RData")
setwd("/Users/stolffederica/Documents/GitHub/sHMEV/data")
load("data/nc.RData")
load("nc.RData")
# splitting data:  training, test and station for illustrative purpose data
id_station = unique(data$STATION)
n_station = as.integer(length(id_station))
stest = sample(1:n_station,2)
sexample = c(3,5,7)
datafit = data %>% filter(STATION %in% id_station[-stest])
datatest = setdiff(data, datafit)
data_station = data %>%
group_by(STATION, LATITUDE, LONGITUDE) %>%
summarise(id = 1)
data_station$id = c(1:nrow(data_station))
station_fit = data_station %>% filter(STATION %in% id_station[-stest])
station_test = setdiff(data_station, station_fit)
station_fit1 = station_fit %>% filter(STATION %in% id_station[-sexample])
station_fit2 = setdiff(station_fit, station_fit1)
# create grid of points of North Carolina
g = gridPoints(name_state = "North Carolina")
View(gridPoints)
us = getData('GADM', country = 'US', level = 1)
nc = us[us$NAME_1 == area, ]
View(us)
str(us$NAME_1)
nc = us[us$NAME_1 == "North Carolina", ]
rm(list=ls())
library(tidyverse)
library(devtools)
library(gridExtra)
library(data.table)
library(latex2exp)
library(elevatr)
library(raster)
library(maps)
library(sp)
library(PBSmapping)
setwd("/Users/stolffederica/Documents/GitHub/sHMEV/codes")
source("sHMEV_function.R")
source("sHMEV_function.R")
setwd("/Users/stolffederica/Documents/GitHub/sHMEV/data")
load("nc.RData")
# splitting data:  training, test and station for illustrative purpose data
id_station = unique(data$STATION)
n_station = as.integer(length(id_station))
stest = sample(1:n_station,2)
sexample = c(3,5,7)
datafit = data %>% filter(STATION %in% id_station[-stest])
datatest = setdiff(data, datafit)
data_station = data %>%
group_by(STATION, LATITUDE, LONGITUDE) %>%
summarise(id = 1)
data_station$id = c(1:nrow(data_station))
station_fit = data_station %>% filter(STATION %in% id_station[-stest])
station_test = setdiff(data_station, station_fit)
station_fit1 = station_fit %>% filter(STATION %in% id_station[-sexample])
station_fit2 = setdiff(station_fit, station_fit1)
# create grid of points of North Carolina
g = gridPoints(name_state = "North Carolina")
g
us = getData('GADM', country = 'US', level = 1)
nc = us[us$NAME_1 == "North Carolina", ]
# Create a grid of points within the bbox of the SpatialPolygonsDataFrame
grid = makegrid(nc, cellsize = cell_size) # cellsize in map units
cell_size = 0.1
# Create a grid of points within the bbox of the SpatialPolygonsDataFrame
grid = makegrid(nc, cellsize = cell_size) # cellsize in map units
grid = SpatialPoints(grid, proj4string = CRS(proj4string(nc)))
grid = grid[nc,] # subset only point inside nc
g = grid@coords
g = data.frame(g)
colnames(g) = c("x", "y") # x=long, y=lat
